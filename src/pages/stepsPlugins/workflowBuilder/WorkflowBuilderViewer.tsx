/* eslint-disable @typescript-eslint/no-explicit-any */
// src/pages/stepsPlugins/workflowBuilder/WorkflowBuilderViewer.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Check } from 'lucide-react';
import { ViewerProps } from '../types';
import { useDataStore } from '@/store/dataStore';
import { useStepStore } from '@/store/stepStore';
import { ConversationItem } from '@/types';

export function WorkflowBuilderViewer({ step, onComplete }: ViewerProps) {
  const [userInput, setUserInput] = useState('');
  const [generatedWorkflow, setGeneratedWorkflow] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [conversation, setConversation] = useState<ConversationItem[]>([]);
  const [workflowApplied, setWorkflowApplied] = useState(false);
  
  const { getTaskSteps } = useStepStore();
  const { addTask } = useDataStore();
  
  // Get context from previous steps to better understand what workflow to build
  const gatherContext = () => {
    const taskSteps = getTaskSteps(step.taskId);
    let context = '';
    
    // Find previous steps that might have relevant data
    const previousSteps = taskSteps.filter(s => 
      s.order < step.order && 
      s.result && 
      (s.type === 'llm-generator' || s.type === 'data-collector')
    );
    
    previousSteps.forEach(prevStep => {
      if (prevStep.result?.content) {
        context += `${prevStep.title}: ${prevStep.result.content}\n\n`;
      }
      else if (prevStep.result?.formData) {
        context += `${prevStep.title}: ${JSON.stringify(prevStep.result.formData)}\n\n`;
      }
    });
    
    return context;
  };
  
  const handleGenerate = async () => {
    if (!userInput.trim()) return;
    
    setLoading(true);
    setError(null);
    
    try {
      // In a real app, this would call your LLM API
      // For this example, we'll simulate a response
      
      // Gather context from previous steps
      const context = gatherContext();
      
      // Create the system prompt
      const systemPrompt = step.config.systemPrompt || 
        'You are a workflow design assistant that helps build effective task sequences.';
      
      // Create the user prompt
      const fullUserPrompt = `Design a workflow for: ${userInput}`;
      
      // Add context if available
      const promptWithContext = context 
        ? `${fullUserPrompt}\n\nContext from previous steps:\n${context}` 
        : fullUserPrompt;
      
      // Add to conversation
      const newConversation: ConversationItem[] = [
        ...conversation,
        { role: 'user', content: promptWithContext }
      ];
      
      // Simulate LLM processing time
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate mock workflow based on input
      // This would be generated by an actual LLM in a real implementation
      let workflowSteps = [];
      
      // Create different workflow templates based on the input keywords
      if (userInput.toLowerCase().includes('marketing') || userInput.toLowerCase().includes('campaign')) {
        workflowSteps = [
          {
            type: 'data-collector',
            title: 'Marketing Campaign Details',
            description: 'Collect basic information about the marketing campaign',
            config: {
              fields: [
                { id: 'campaignName', label: 'Campaign Name', type: 'text', required: true },
                { id: 'objective', label: 'Campaign Objective', type: 'select', required: true,
                  options: ['Brand Awareness', 'Lead Generation', 'Sales', 'Customer Retention'] },
                { id: 'budget', label: 'Budget', type: 'number', required: true },
                { id: 'timeline', label: 'Duration (days)', type: 'number', required: true }
              ]
            }
          },
          {
            type: 'data-collector',
            title: 'Target Audience',
            description: 'Define your target audience for this campaign',
            config: {
              useLLMToGenerateFields: true,
              fieldGenerationPrompt: 'Generate form fields to collect target audience information for a marketing campaign'
            }
          },
          {
            type: 'llm-generator',
            title: 'Competitor Analysis',
            description: 'Generate a competitive analysis for the campaign',
            config: {
              systemPrompt: 'You are a marketing analyst specialized in competitive analysis',
              userPrompt: 'Create a comprehensive competitive analysis based on the campaign details and target audience information provided. Include strengths, weaknesses, opportunities, and threats.'
            }
          },
          {
            type: 'llm-generator',
            title: 'Campaign Strategy',
            description: 'Generate the marketing campaign strategy',
            config: {
              systemPrompt: 'You are a marketing strategist specialized in campaign planning',
              userPrompt: 'Create a detailed marketing campaign strategy based on the provided information. Include channels, messaging approach, timeline, budget allocation, and success metrics.'
            }
          },
          {
            type: 'llm-generator',
            title: 'Campaign Content Plan',
            description: 'Generate a content plan for the campaign',
            config: {
              systemPrompt: 'You are a content strategist specialized in marketing campaigns',
              userPrompt: 'Create a content plan for this marketing campaign. Include content types, topics, messaging, and publication schedule.'
            }
          }
        ];
      } else if (userInput.toLowerCase().includes('website') || userInput.toLowerCase().includes('domain')) {
        workflowSteps = [
          {
            type: 'data-collector',
            title: 'Website Information',
            description: 'Collect basic information about the website',
            config: {
              fields: [
                { id: 'domain', label: 'Website Domain', type: 'url', required: true },
                { id: 'industry', label: 'Industry', type: 'select', required: true,
                  options: ['E-commerce', 'SaaS', 'Healthcare', 'Education', 'Finance', 'Other'] },
                { id: 'objectives', label: 'Website Objectives', type: 'textarea', required: true }
              ]
            }
          },
          {
            type: 'llm-generator',
            title: 'Website Analysis',
            description: 'Generate a comprehensive website analysis',
            config: {
              systemPrompt: 'You are a website analyst specialized in UX, content, and SEO',
              userPrompt: 'Create a comprehensive analysis of the website. Include strengths, weaknesses, opportunities for improvement, content quality, user experience, and technical performance.'
            }
          },
          {
            type: 'llm-generator',
            title: 'Competitor Comparison',
            description: 'Compare the website with competitors',
            config: {
              systemPrompt: 'You are a digital marketing analyst specializing in competitive analysis',
              userPrompt: 'Create a comparison between this website and its main competitors. Focus on design, user experience, content quality, features, and unique selling points.'
            }
          },
          {
            type: 'llm-generator',
            title: 'SEO Recommendations',
            description: 'Generate SEO recommendations for the website',
            config: {
              systemPrompt: 'You are an SEO expert',
              userPrompt: 'Create a list of SEO recommendations for the website. Include on-page SEO, content strategy, keyword opportunities, and technical improvements.'
            }
          },
          {
            type: 'llm-generator',
            title: 'Content Strategy',
            description: 'Generate a content strategy for the website',
            config: {
              systemPrompt: 'You are a content strategist specialized in web content',
              userPrompt: 'Create a content strategy for this website. Include content types, topics, target keywords, and publication frequency.'
            }
          }
        ];
      } else {
        // Generic workflow for other types of requests
        workflowSteps = [
          {
            type: 'data-collector',
            title: 'Project Information',
            description: 'Collect basic information about the project',
            config: {
              useLLMToGenerateFields: true,
              fieldGenerationPrompt: `Generate form fields to collect information about: ${userInput}`
            }
          },
          {
            type: 'llm-generator',
            title: 'Current Situation Analysis',
            description: 'Generate an analysis of the current situation',
            config: {
              systemPrompt: 'You are an analyst specialized in business and project analysis',
              userPrompt: `Create a comprehensive analysis of the current situation related to: ${userInput}. Include strengths, weaknesses, opportunities, and challenges.`
            }
          },
          {
            type: 'llm-generator',
            title: 'Strategic Recommendations',
            description: 'Generate strategic recommendations',
            config: {
              systemPrompt: 'You are a strategic consultant',
              userPrompt: `Create a set of strategic recommendations for: ${userInput}. Include short-term and long-term goals, action items, and success metrics.`
            }
          },
          {
            type: 'llm-generator',
            title: 'Implementation Plan',
            description: 'Generate an implementation plan',
            config: {
              systemPrompt: 'You are a project management expert',
              userPrompt: `Create a detailed implementation plan for: ${userInput}. Include timeline, resource requirements, key milestones, and potential risks.`
            }
          }
        ];
      }
      
      // Limit the number of steps based on config
      if (step.config.maxSteps && step.config.maxSteps > 0) {
        workflowSteps = workflowSteps.slice(0, step.config.maxSteps);
      }
      
      // Create the workflow object
      const workflow = {
        title: userInput,
        description: `Workflow for: ${userInput}`,
        steps: workflowSteps
      };
      
      setGeneratedWorkflow(workflow);
      
      // Add LLM response to conversation
      const responseContent = `I've designed a workflow for "${userInput}" with ${workflowSteps.length} steps:\n\n${
        workflowSteps.map((s, i) => `${i+1}. ${s.title}: ${s.description}`).join('\n')
      }`;
      
      newConversation.push({ role: 'assistant', content: responseContent });
      setConversation(newConversation);
      
      // Complete the step
      onComplete({
        workflow,
        timestamp: new Date().toISOString()
      }, newConversation);
      
    } catch (err) {
      setError('Failed to generate workflow. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };
  
  // Create a new task with the generated workflow
  const applyWorkflow = async () => {
    if (!generatedWorkflow) return;
    
    try {
      setLoading(true);
      
      // Create a new task with this workflow
      const newTask = {
        id: `task-${Date.now()}`,
        title: generatedWorkflow.title,
        description: generatedWorkflow.description,
        status: 'todo',
        priority: 'medium',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        projectId: '', // Could be set from context if needed
        currentStepId: null
      };
      
      // Add the task
      addTask(newTask);
      
      // Add the steps to the task
      const stepStore = useStepStore.getState();
      
      for (const stepConfig of generatedWorkflow.steps) {
        await stepStore.addStep(newTask.id, {
          title: stepConfig.title,
          description: stepConfig.description,
          type: stepConfig.type,
          config: stepConfig.config,
          options: {},
          status: 'pending'
        });
      }
      
      setWorkflowApplied(true);
      
    } catch (err) {
      console.error('Error applying workflow:', err);
      setError('Failed to apply workflow. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="mb-4">
      <CardHeader>
        <CardTitle>{step.config.title || 'Build Workflow'}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="p-3 bg-muted rounded-md">
            <p className="text-sm">Describe the workflow you want to create. For example: "Marketing campaign workflow for a new product launch" or "Website analysis and improvement workflow".</p>
          </div>
          
          <Textarea
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Describe what kind of workflow you need..."
            className="min-h-32"
            disabled={loading || !!generatedWorkflow}
          />
          
          {error && <p className="text-destructive text-sm">{error}</p>}
          
          {generatedWorkflow && (
            <div className="border rounded-md p-4">
              <h3 className="text-base font-medium mb-2">Generated Workflow: {generatedWorkflow.title}</h3>
              <p className="text-sm text-muted-foreground mb-3">{generatedWorkflow.description}</p>
              
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Steps:</h4>
                <ol className="list-decimal ml-5 space-y-1">
                  {generatedWorkflow.steps.map((s: any, i: number) => (
                    <li key={i} className="text-sm">
                      <span className="font-medium">{s.title}</span>
                      <span className="text-muted-foreground"> - {s.description}</span>
                    </li>
                  ))}
                </ol>
              </div>
              
              <div className="mt-4">
                {!workflowApplied ? (
                  <Button onClick={applyWorkflow} disabled={loading}>
                    {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
                    Create Task with this Workflow
                  </Button>
                ) : (
                  <div className="flex items-center gap-2 text-green-600 font-medium">
                    <Check size={16} />
                    <span>Task created successfully!</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter>
        {!generatedWorkflow && (
          <Button onClick={handleGenerate} disabled={loading || !userInput.trim()}>
            {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
            {loading ? 'Generating...' : 'Generate Workflow'}
          </Button>
        )}
      </CardFooter>
    </Card>
  );
}
